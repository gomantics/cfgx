// Package generator provides internal implementation for TOML to Go code generation.
package generator

import (
	"bytes"
	"fmt"
	"go/format"
	"strings"

	"github.com/BurntSushi/toml"
)

// Generator handles the conversion of TOML config to Go code.
type Generator struct {
	packageName string // The package name for the generated code
	envOverride bool   // Whether to enable environment variable override support
	inputDir    string // Directory of input TOML file for resolving relative file paths
	maxFileSize int64  // Maximum file size in bytes for file: references
	mode        string // Generation mode: "static" or "getter"
}

// Option configures a Generator.
type Option func(*Generator)

// WithPackageName sets the package name for generated code.
func WithPackageName(name string) Option {
	return func(g *Generator) {
		g.packageName = name
	}
}

// WithEnvOverride enables environment variable override support.
func WithEnvOverride(enable bool) Option {
	return func(g *Generator) {
		g.envOverride = enable
	}
}

// WithInputDir sets the input directory for resolving relative file paths.
func WithInputDir(dir string) Option {
	return func(g *Generator) {
		g.inputDir = dir
	}
}

// WithMaxFileSize sets the maximum file size for file: references.
func WithMaxFileSize(size int64) Option {
	return func(g *Generator) {
		g.maxFileSize = size
	}
}

// WithMode sets the generation mode.
func WithMode(mode string) Option {
	return func(g *Generator) {
		g.mode = mode
	}
}

// New creates a new Generator with the given options.
func New(opts ...Option) *Generator {
	g := &Generator{
		packageName: "config",
		envOverride: true,
		maxFileSize: 1024 * 1024, // 1MB default
		mode:        "static",    // default to static mode
	}
	for _, opt := range opts {
		opt(g)
	}
	return g
}

// stripSuffix removes "Config" or "Item" suffix from a struct name.
// This prevents nested structs from accumulating multiple suffixes
// (e.g., "AppConfigLoggingConfig" -> "AppLogging").
func stripSuffix(name string) string {
	if strings.HasSuffix(name, "Config") {
		return strings.TrimSuffix(name, "Config")
	}
	if strings.HasSuffix(name, "Item") {
		return strings.TrimSuffix(name, "Item")
	}
	return name
}

// writeGetterImports writes the necessary imports for getter mode.
func (g *Generator) writeGetterImports(buf *bytes.Buffer, data map[string]any) {
	needsTime := g.needsTimeImport(data)
	needsStrconv := g.needsStrconvImport(data)

	// Always need os for os.Getenv in getter mode
	if needsTime || needsStrconv {
		buf.WriteString("import (\n")
		buf.WriteString("\t\"os\"\n")
		if needsStrconv {
			buf.WriteString("\t\"strconv\"\n")
		}
		if needsTime {
			buf.WriteString("\t\"time\"\n")
		}
		buf.WriteString(")\n\n")
	} else {
		buf.WriteString("import \"os\"\n\n")
	}
}

// needsStrconvImport checks if the data needs strconv import (for int64, float64, bool).
func (g *Generator) needsStrconvImport(data map[string]any) bool {
	for _, v := range data {
		if g.checkStrconvNeeded(v) {
			return true
		}
	}
	return false
}

// checkStrconvNeeded recursively checks if a value needs strconv.
func (g *Generator) checkStrconvNeeded(v any) bool {
	switch val := v.(type) {
	case int64, int, float64, bool:
		return true
	case map[string]any:
		for _, nested := range val {
			if g.checkStrconvNeeded(nested) {
				return true
			}
		}
	case []map[string]any:
		for _, item := range val {
			for _, nested := range item {
				if g.checkStrconvNeeded(nested) {
					return true
				}
			}
		}
	case []any:
		for _, item := range val {
			if g.checkStrconvNeeded(item) {
				return true
			}
		}
	}
	return false
}

// Generate parses TOML data and generates Go code.
func (g *Generator) Generate(tomlData []byte) ([]byte, error) {
	var data map[string]any
	if err := toml.Unmarshal(tomlData, &data); err != nil {
		return nil, fmt.Errorf("failed to parse TOML: %w", err)
	}

	// Validate all file references before generating code
	if err := g.validateFileReferences(data); err != nil {
		return nil, err
	}

	var buf bytes.Buffer

	buf.WriteString("// Code generated by cfgx. DO NOT EDIT.\n\n")
	buf.WriteString(fmt.Sprintf("package %s\n\n", g.packageName))

	// Generate imports based on mode
	if g.mode == "getter" {
		g.writeGetterImports(&buf, data)
	} else {
		needsTime := g.needsTimeImport(data)
		if needsTime {
			buf.WriteString("import \"time\"\n\n")
		}
	}

	// Generate code based on mode
	if g.mode == "getter" {
		if err := g.generateStructsAndGetters(&buf, data); err != nil {
			return nil, err
		}
	} else {
		if err := g.generateStructsAndVars(&buf, data); err != nil {
			return nil, err
		}
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("failed to format generated code: %w\n%s", err, buf.String())
	}

	return formatted, nil
}
