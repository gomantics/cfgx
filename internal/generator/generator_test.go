package generator

import (
	"os"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerator_Generate_Simple(t *testing.T) {
	data, err := os.ReadFile("../../testdata/simple.toml")
	require.NoError(t, err, "failed to read test file")

	gen := New(WithPackageName("config"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check package declaration
	require.Contains(t, outputStr, "package config", "output missing package declaration")

	// Check struct definitions
	require.Contains(t, outputStr, "type ServerConfig struct", "output missing ServerConfig struct")
	require.Contains(t, outputStr, "type DatabaseConfig struct", "output missing DatabaseConfig struct")

	// Check struct fields
	require.Contains(t, outputStr, "Addr", "output missing Addr field")
	require.Contains(t, outputStr, "string", "output missing string type")
	require.Contains(t, outputStr, "Timeout", "output missing Timeout field")
	require.Contains(t, outputStr, "int64", "output missing int64 type")
	require.Contains(t, outputStr, "Debug", "output missing Debug field")
	require.Contains(t, outputStr, "bool", "output missing bool type")

	// Check variable declarations
	require.Contains(t, outputStr, "var Server = ServerConfig", "output missing Server variable")
	require.Contains(t, outputStr, "var Database = DatabaseConfig", "output missing Database variable")

	// Check values
	require.Contains(t, outputStr, `":8080"`, "output missing Addr value")
	require.True(t, strings.Contains(outputStr, "Timeout:") && strings.Contains(outputStr, "30"), "output missing Timeout value")
	require.True(t, strings.Contains(outputStr, "Debug:") && strings.Contains(outputStr, "true"), "output missing Debug value")

	// Ensure it's valid Go (format.Source was called)
	require.True(t, strings.HasPrefix(outputStr, "// Code generated by cfgx. DO NOT EDIT."), "output missing generation comment")
}

func TestGenerator_Generate_Nested(t *testing.T) {
	data, err := os.ReadFile("../../testdata/nested.toml")
	require.NoError(t, err, "failed to read test file")

	gen := New(WithPackageName("config"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check nested struct definitions
	require.Contains(t, outputStr, "type AppConfig struct", "output missing AppConfig struct")
	require.Contains(t, outputStr, "type AppConfigLoggingConfig struct", "output missing AppConfigLoggingConfig struct")
	require.Contains(t, outputStr, "type AppConfigLoggingConfigRotationConfig struct", "output missing AppConfigLoggingConfigRotationConfig struct")

	// Check nested field types
	require.Contains(t, outputStr, "Logging", "output missing Logging field")
	require.Contains(t, outputStr, "AppConfigLoggingConfig", "output missing AppConfigLoggingConfig type")
	require.Contains(t, outputStr, "Rotation", "output missing Rotation field")
	require.Contains(t, outputStr, "AppConfigLoggingConfigRotationConfig", "output missing AppConfigLoggingConfigRotationConfig type")

	// Check nested initialization
	require.Contains(t, outputStr, "Logging: AppConfigLoggingConfig{", "output missing nested Logging initialization")
}

func TestGenerator_Generate_Arrays(t *testing.T) {
	data, err := os.ReadFile("../../testdata/arrays.toml")
	require.NoError(t, err, "failed to read test file")

	gen := New(WithPackageName("config"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check array types
	require.Contains(t, outputStr, "AllowedOrigins", "output missing AllowedOrigins field")
	require.Contains(t, outputStr, "[]string", "output missing []string type")
	require.Contains(t, outputStr, "Ports", "output missing Ports field")
	require.Contains(t, outputStr, "[]int64", "output missing []int64 type")

	// Check array values
	require.Contains(t, outputStr, `[]string{"https://example.com", "https://app.example.com"}`, "output missing string array values")
	require.Contains(t, outputStr, "[]int64{8080, 8081, 8082}", "output missing int array values")

	// Check array of tables
	require.Contains(t, outputStr, "type EndpointsItem struct", "output missing array of tables struct")
	require.True(t, strings.Contains(outputStr, "var Endpoints") && strings.Contains(outputStr, "[]EndpointsItem"), "output missing array of tables variable")
}

func TestGenerator_Generate_Complex(t *testing.T) {
	data, err := os.ReadFile("../../testdata/complex.toml")
	require.NoError(t, err, "failed to read test file")

	gen := New(WithPackageName("config"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Should generate multiple struct types
	structCount := strings.Count(outputStr, "type ")
	require.GreaterOrEqual(t, structCount, 5, "expected at least 5 struct definitions")

	// Check complex nested structures
	require.Contains(t, outputStr, "type CacheConfig struct", "output missing CacheConfig")
	require.Contains(t, outputStr, "type CacheConfigRedisConfig struct", "output missing CacheConfigRedisConfig")
	require.Contains(t, outputStr, "Redis", "output missing Redis field")
	require.Contains(t, outputStr, "CacheConfigRedisConfig", "output missing CacheConfigRedisConfig type")
}

func TestGenerator_CustomPackageName(t *testing.T) {
	data := []byte(`
[app]
name = "test"
`)

	gen := New(WithPackageName("mypackage"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)
	require.Contains(t, outputStr, "package mypackage", "custom package name not applied")
}

func TestGenerator_EmptyConfig(t *testing.T) {
	data := []byte("")

	gen := New()
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	// Should still generate valid Go code with just package declaration
	outputStr := string(output)
	require.Contains(t, outputStr, "package config", "empty config should still generate package declaration")
}

func TestGenerator_InvalidTOML(t *testing.T) {
	data := []byte(`
[invalid
not closed
`)

	gen := New()
	_, err := gen.Generate(data)
	require.Error(t, err, "expected error for invalid TOML")
}

func TestGenerator_DeterministicOutput(t *testing.T) {
	data := []byte(`
[zulu]
value = 1

[alpha]
value = 2

[beta]
value = 3
`)

	gen := New()

	// Generate multiple times
	output1, err := gen.Generate(data)
	require.NoError(t, err, "first Generate() should not error")

	output2, err := gen.Generate(data)
	require.NoError(t, err, "second Generate() should not error")

	// Outputs should be identical (deterministic)
	require.Equal(t, string(output1), string(output2), "generator output is not deterministic")

	// Fields should be sorted alphabetically
	out := string(output1)
	alphaPos := strings.Index(out, "var Alpha")
	betaPos := strings.Index(out, "var Beta")
	zuluPos := strings.Index(out, "var Zulu")

	require.NotEqual(t, -1, alphaPos, "missing Alpha variable")
	require.NotEqual(t, -1, betaPos, "missing Beta variable")
	require.NotEqual(t, -1, zuluPos, "missing Zulu variable")

	require.True(t, alphaPos < betaPos && betaPos < zuluPos, "variables not sorted alphabetically")
}

func TestGenerator_Types(t *testing.T) {
	tests := []struct {
		name string
		toml string
		want []string
	}{
		{
			name: "string type",
			toml: `[config]
value = "hello"`,
			want: []string{"Value", "string", `Value: "hello"`},
		},
		{
			name: "int type",
			toml: `[config]
value = 42`,
			want: []string{"Value", "int64", "Value: 42"},
		},
		{
			name: "float type",
			toml: `[config]
value = 3.14`,
			want: []string{"Value", "float64", "Value: 3.14"},
		},
		{
			name: "bool type",
			toml: `[config]
value = true`,
			want: []string{"Value", "bool", "Value: true"},
		},
		{
			name: "string array",
			toml: `[config]
values = ["a", "b", "c"]`,
			want: []string{"Values", "[]string", `[]string{"a", "b", "c"}`},
		},
		{
			name: "int array",
			toml: `[config]
values = [1, 2, 3]`,
			want: []string{"Values", "[]int64", "[]int64{1, 2, 3}"},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gen := New()
			output, err := gen.Generate([]byte(tt.toml))
			require.NoError(t, err, "Generate() should not error")

			outputStr := string(output)
			for _, want := range tt.want {
				require.Contains(t, outputStr, want, "output missing expected string")
			}
		})
	}
}
