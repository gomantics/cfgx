package generator

import (
	"os"
	"strings"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestGenerator_Generate(t *testing.T) {
	// Use comprehensive test file covering all type scenarios
	data, err := os.ReadFile("../../testdata/test.toml")
	require.NoError(t, err, "failed to read test file")

	gen := New(WithPackageName("config"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Ensure it's valid Go (format.Source was called)
	require.True(t, strings.HasPrefix(outputStr, "// Code generated by cfgx. DO NOT EDIT."), "output missing generation comment")

	// Check package declaration
	require.Contains(t, outputStr, "package config", "output missing package declaration")

	// Test basic types (from server config)
	require.Contains(t, outputStr, "type ServerConfig struct", "output missing ServerConfig struct")
	require.Contains(t, outputStr, "var (", "output missing var block")
	require.Contains(t, outputStr, "Server = ServerConfig", "output missing Server variable")
	require.Contains(t, outputStr, `":8080"`, "output missing Addr value")
	require.True(t, strings.Contains(outputStr, "Timeout:") && strings.Contains(outputStr, "30"), "output missing Timeout value")
	require.True(t, strings.Contains(outputStr, "Debug:") && strings.Contains(outputStr, "true"), "output missing Debug value")

	// Test nested structures (database.pool)
	require.Contains(t, outputStr, "type DatabaseConfig struct", "output missing DatabaseConfig struct")
	require.Contains(t, outputStr, "type DatabasePoolConfig struct", "output missing nested DatabasePoolConfig struct")
	require.Contains(t, outputStr, "Pool", "output missing Pool field")
	require.Contains(t, outputStr, "DatabasePoolConfig", "output missing DatabasePoolConfig type")

	// Test deeply nested structures (app.logging.rotation)
	require.Contains(t, outputStr, "type AppConfig struct", "output missing AppConfig struct")
	require.Contains(t, outputStr, "type AppLoggingConfig struct", "output missing AppLoggingConfig struct")
	require.Contains(t, outputStr, "type AppLoggingRotationConfig struct", "output missing deeply nested rotation struct")
	require.Contains(t, outputStr, "Rotation", "output missing Rotation field")

	// Test array types
	require.Contains(t, outputStr, "AllowedOrigins", "output missing AllowedOrigins field")
	require.Contains(t, outputStr, "[]string", "output missing []string type")
	require.Contains(t, outputStr, "Ports", "output missing Ports field")
	require.Contains(t, outputStr, "[]int64", "output missing []int64 type")
	require.Contains(t, outputStr, `[]string{"https://example.com", "https://app.example.com"}`, "output missing string array values")
	require.Contains(t, outputStr, "[]int64{8080, 8081, 8082}", "output missing int array values")

	// Test array of tables
	require.Contains(t, outputStr, "type EndpointsItem struct", "output missing array of tables struct")
	require.Contains(t, outputStr, "type FeaturesItem struct", "output missing features array of tables struct")
	require.True(t, strings.Contains(outputStr, "Endpoints = []EndpointsItem"), "output missing Endpoints variable")
	require.True(t, strings.Contains(outputStr, "Features = []FeaturesItem"), "output missing Features variable")

	// Verify multiple struct types were generated
	structCount := strings.Count(outputStr, "type ")
	require.GreaterOrEqual(t, structCount, 8, "expected at least 8 struct definitions for comprehensive config")
}

func TestGenerator_CustomPackageName(t *testing.T) {
	data := []byte(`
[app]
name = "test"
`)

	gen := New(WithPackageName("mypackage"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)
	require.Contains(t, outputStr, "package mypackage", "custom package name not applied")
}

func TestGenerator_EmptyConfig(t *testing.T) {
	data := []byte("")

	gen := New()
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	// Should still generate valid Go code with just package declaration
	outputStr := string(output)
	require.Contains(t, outputStr, "package config", "empty config should still generate package declaration")
}

func TestGenerator_InvalidTOML(t *testing.T) {
	data := []byte(`
[invalid
not closed
`)

	gen := New()
	_, err := gen.Generate(data)
	require.Error(t, err, "expected error for invalid TOML")
}

func TestGenerator_DeterministicOutput(t *testing.T) {
	data := []byte(`
[zulu]
value = 1

[alpha]
value = 2

[beta]
value = 3
`)

	gen := New()

	// Generate multiple times
	output1, err := gen.Generate(data)
	require.NoError(t, err, "first Generate() should not error")

	output2, err := gen.Generate(data)
	require.NoError(t, err, "second Generate() should not error")

	// Outputs should be identical (deterministic)
	require.Equal(t, string(output1), string(output2), "generator output is not deterministic")

	// Fields should be sorted alphabetically
	out := string(output1)
	alphaPos := strings.Index(out, "\tAlpha")
	betaPos := strings.Index(out, "\tBeta")
	zuluPos := strings.Index(out, "\tZulu")

	require.NotEqual(t, -1, alphaPos, "missing Alpha variable")
	require.NotEqual(t, -1, betaPos, "missing Beta variable")
	require.NotEqual(t, -1, zuluPos, "missing Zulu variable")

	require.True(t, alphaPos < betaPos && betaPos < zuluPos, "variables not sorted alphabetically")
}

func TestGenerator_GetterMode(t *testing.T) {
	data := []byte(`
[server]
addr = ":8080"
timeout = "30s"
port = 8080
debug = true

[database]
max_conns = 25
`)

	gen := New(WithPackageName("config"), WithMode("getter"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error in getter mode")

	outputStr := string(output)

	// Check package and imports
	require.Contains(t, outputStr, "package config", "output missing package declaration")
	require.Contains(t, outputStr, `import (`, "output missing imports")
	require.Contains(t, outputStr, `"os"`, "output missing os import")
	require.Contains(t, outputStr, `"strconv"`, "output missing strconv import")
	require.Contains(t, outputStr, `"time"`, "output missing time import")

	// Check empty structs (now unexported)
	require.Contains(t, outputStr, "type serverConfig struct{}", "output missing empty serverConfig struct")
	require.Contains(t, outputStr, "type databaseConfig struct{}", "output missing empty databaseConfig struct")

	// Check getter methods exist
	require.Contains(t, outputStr, "func (serverConfig) Addr() string", "output missing Addr getter")
	require.Contains(t, outputStr, "func (serverConfig) Timeout() time.Duration", "output missing Timeout getter")
	require.Contains(t, outputStr, "func (serverConfig) Port() int64", "output missing Port getter")
	require.Contains(t, outputStr, "func (serverConfig) Debug() bool", "output missing Debug getter")
	require.Contains(t, outputStr, "func (databaseConfig) MaxConns() int64", "output missing MaxConns getter")

	// Check env var logic
	require.Contains(t, outputStr, `os.Getenv("CONFIG_SERVER_ADDR")`, "output missing env var check for addr")
	require.Contains(t, outputStr, `os.Getenv("CONFIG_SERVER_TIMEOUT")`, "output missing env var check for timeout")
	require.Contains(t, outputStr, `os.Getenv("CONFIG_DATABASE_MAX_CONNS")`, "output missing env var check for max_conns")

	// Check type conversions
	require.Contains(t, outputStr, "strconv.ParseInt", "output missing int parsing")
	require.Contains(t, outputStr, "strconv.ParseBool", "output missing bool parsing")
	require.Contains(t, outputStr, "time.ParseDuration", "output missing duration parsing")

	// Check default value returns
	require.Contains(t, outputStr, `return ":8080"`, "output missing default addr")
	require.Contains(t, outputStr, `return 30 * time.Second`, "output missing default timeout")
	require.Contains(t, outputStr, `return 8080`, "output missing default port")
	require.Contains(t, outputStr, `return true`, "output missing default debug")
	require.Contains(t, outputStr, `return 25`, "output missing default max_conns")

	// Check var declarations (allow for variable spacing due to gofmt alignment)
	require.Contains(t, outputStr, "Server", "output missing Server var")
	require.Contains(t, outputStr, "serverConfig", "output missing serverConfig type")
	require.Contains(t, outputStr, "Database", "output missing Database var")
	require.Contains(t, outputStr, "databaseConfig", "output missing databaseConfig type")
}

func TestGenerator_GetterMode_NestedStructs(t *testing.T) {
	data := []byte(`
[database]
dsn = "postgres://localhost/db"

[database.pool]
max_size = 10
min_size = 2
`)

	gen := New(WithPackageName("config"), WithMode("getter"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check nested structs (now unexported)
	require.Contains(t, outputStr, "type databaseConfig struct{}", "output missing databaseConfig")
	require.Contains(t, outputStr, "type databasepoolConfig struct{}", "output missing databasepoolConfig")

	// Check nested getter returns nested struct
	require.Contains(t, outputStr, "func (databaseConfig) Pool() databasepoolConfig", "output missing Pool getter")
	require.Contains(t, outputStr, "return databasepoolConfig{}", "output missing databasepoolConfig return")

	// Check nested struct methods with correct env var names
	require.Contains(t, outputStr, `os.Getenv("CONFIG_DATABASE_POOL_MAX_SIZE")`, "output missing nested env var")
	require.Contains(t, outputStr, `os.Getenv("CONFIG_DATABASE_POOL_MIN_SIZE")`, "output missing nested env var")
	require.Contains(t, outputStr, "func (databasepoolConfig) MaxSize() int64", "output missing nested MaxSize getter")
	require.Contains(t, outputStr, "func (databasepoolConfig) MinSize() int64", "output missing nested MinSize getter")
}

func TestGenerator_GetterMode_Arrays(t *testing.T) {
	data := []byte(`
[service]
hosts = ["localhost", "example.com"]
ports = [8080, 8081]
`)

	gen := New(WithPackageName("config"), WithMode("getter"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check array getters with limitation comment (now unexported struct)
	require.Contains(t, outputStr, "func (serviceConfig) Hosts() []string", "output missing Hosts getter")
	require.Contains(t, outputStr, "func (serviceConfig) Ports() []int64", "output missing Ports getter")
	require.Contains(t, outputStr, "// Array overrides not supported via env vars", "output missing array limitation comment")
	require.Contains(t, outputStr, `return []string{"localhost", "example.com"}`, "output missing hosts default")
	require.Contains(t, outputStr, "return []int64{8080, 8081}", "output missing ports default")
}

func TestGenerator_GetterMode_NoDuplicateMethods(t *testing.T) {
	data := []byte(`
[cache]
enabled = true

[cache.redis]
addr = "localhost:6379"
db = 0
`)

	gen := New(WithPackageName("config"), WithMode("getter"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check that Redis methods are only generated once (now unexported struct)
	addrCount := strings.Count(outputStr, "func (cacheredisConfig) Addr() string")
	require.Equal(t, 1, addrCount, "Addr method should be generated exactly once")

	dbCount := strings.Count(outputStr, "func (cacheredisConfig) Db() int64")
	require.Equal(t, 1, dbCount, "Db method should be generated exactly once")
}

func TestGenerator_EnvVarName(t *testing.T) {
	gen := New()

	tests := []struct {
		structName string
		fieldName  string
		expected   string
	}{
		{"ServerConfig", "addr", "CONFIG_SERVER_ADDR"},
		{"DatabaseConfig", "max_conns", "CONFIG_DATABASE_MAX_CONNS"},
		{"AppLoggingConfig", "level", "CONFIG_APP_LOGGING_LEVEL"},
		{"CacheRedisConfig", "addr", "CONFIG_CACHE_REDIS_ADDR"},
	}

	for _, tt := range tests {
		result := gen.envVarName(tt.structName, tt.fieldName)
		require.Equal(t, tt.expected, result, "envVarName(%s, %s) = %s, want %s", tt.structName, tt.fieldName, result, tt.expected)
	}
}

func TestGenerator_StaticModeDefault(t *testing.T) {
	data := []byte(`
[server]
addr = ":8080"
`)

	// Test without WithMode (should default to static)
	gen := New(WithPackageName("config"))
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Should generate fields, not methods
	require.Contains(t, outputStr, "type ServerConfig struct {", "output should have struct with fields")
	require.Contains(t, outputStr, "Addr string", "output should have Addr field")
	require.NotContains(t, outputStr, "func (ServerConfig) Addr() string", "output should not have getter methods")
	require.NotContains(t, outputStr, "os.Getenv", "static mode should not use env vars")
}

func TestGenerator_GetterMode_FileReferences(t *testing.T) {
	data := []byte(`
[server]
tls_cert = "file:files/cert.txt"
tls_key = "file:files/small.txt"
`)

	gen := New(
		WithPackageName("config"),
		WithMode("getter"),
		WithInputDir("../../testdata"),
	)
	output, err := gen.Generate(data)
	require.NoError(t, err, "Generate() should not error")

	outputStr := string(output)

	// Check file loading logic exists (now unexported struct)
	require.Contains(t, outputStr, "func (serverConfig) TlsCert() []byte", "output missing TlsCert getter")
	require.Contains(t, outputStr, `os.Getenv("CONFIG_SERVER_TLS_CERT")`, "output missing file path env var check")
	require.Contains(t, outputStr, "os.ReadFile(path)", "output missing file read")
	require.Contains(t, outputStr, "return data", "output missing return data")

	// Check it still has embedded fallback
	require.Contains(t, outputStr, "return []byte{", "output missing embedded fallback bytes")

	// Check same for key
	require.Contains(t, outputStr, "func (serverConfig) TlsKey() []byte", "output missing TlsKey getter")
	require.Contains(t, outputStr, `os.Getenv("CONFIG_SERVER_TLS_KEY")`, "output missing file path env var check for key")
}
