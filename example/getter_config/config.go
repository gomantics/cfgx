// Code generated by cfgx. DO NOT EDIT.

package getter_config

import (
	"os"
	"strconv"
	"time"
)

type AppConfig struct{}

type AppLoggingConfig struct{}

type AppLoggingRotationConfig struct{}

type CacheConfig struct{}

type CacheRedisConfig struct{}

type DatabaseConfig struct{}

type DatabasePoolConfig struct{}

type EndpointsItem struct{}

type FeaturesItem struct{}

type ServerConfig struct{}

type ServiceConfig struct{}

func (AppConfig) Logging() AppLoggingConfig {
	return AppLoggingConfig{}
}

func (AppLoggingConfig) File() string {
	if v := os.Getenv("CONFIG_APP_LOGGING_FILE"); v != "" {
		return v
	}
	return "/var/log/app.log"
}

func (AppLoggingConfig) Format() string {
	if v := os.Getenv("CONFIG_APP_LOGGING_FORMAT"); v != "" {
		return v
	}
	return "json"
}

func (AppLoggingConfig) Level() string {
	if v := os.Getenv("CONFIG_APP_LOGGING_LEVEL"); v != "" {
		return v
	}
	return "info"
}

func (AppLoggingConfig) Rotation() AppLoggingRotationConfig {
	return AppLoggingRotationConfig{}
}

func (AppLoggingRotationConfig) Compress() bool {
	if v := os.Getenv("CONFIG_APP_LOGGING_ROTATION_COMPRESS"); v != "" {
		if b, err := strconv.ParseBool(v); err == nil {
			return b
		}
	}
	return true
}

func (AppLoggingRotationConfig) MaxAge() int64 {
	if v := os.Getenv("CONFIG_APP_LOGGING_ROTATION_MAX_AGE"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 30
}

func (AppLoggingRotationConfig) MaxSize() int64 {
	if v := os.Getenv("CONFIG_APP_LOGGING_ROTATION_MAX_SIZE"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 100
}

func (AppConfig) Name() string {
	if v := os.Getenv("CONFIG_APP_NAME"); v != "" {
		return v
	}
	return "myservice"
}

func (AppConfig) Version() string {
	if v := os.Getenv("CONFIG_APP_VERSION"); v != "" {
		return v
	}
	return "1.0.0"
}

func (CacheConfig) Enabled() bool {
	if v := os.Getenv("CONFIG_CACHE_ENABLED"); v != "" {
		if b, err := strconv.ParseBool(v); err == nil {
			return b
		}
	}
	return true
}

func (CacheConfig) MaxEntries() int64 {
	if v := os.Getenv("CONFIG_CACHE_MAX_ENTRIES"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 10000
}

func (CacheConfig) Outputs() []string {
	if v := os.Getenv("CONFIG_CACHE_OUTPUTS"); v != "" {
		// Array overrides not supported via env vars
	}
	return []string{"stdout", "file"}
}

func (CacheConfig) Redis() CacheRedisConfig {
	return CacheRedisConfig{}
}

func (CacheRedisConfig) Addr() string {
	if v := os.Getenv("CONFIG_CACHE_REDIS_ADDR"); v != "" {
		return v
	}
	return "localhost:6379"
}

func (CacheRedisConfig) Db() int64 {
	if v := os.Getenv("CONFIG_CACHE_REDIS_DB"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 0
}

func (CacheRedisConfig) Password() string {
	if v := os.Getenv("CONFIG_CACHE_REDIS_PASSWORD"); v != "" {
		return v
	}
	return ""
}

func (CacheConfig) Ttl() time.Duration {
	if v := os.Getenv("CONFIG_CACHE_TTL"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 1 * time.Hour
}

func (DatabaseConfig) ConnMaxLifetime() time.Duration {
	if v := os.Getenv("CONFIG_DATABASE_CONN_MAX_LIFETIME"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 5 * time.Minute
}

func (DatabaseConfig) Dsn() string {
	if v := os.Getenv("CONFIG_DATABASE_DSN"); v != "" {
		return v
	}
	return "postgres://localhost/myapp"
}

func (DatabaseConfig) MaxIdleConns() int64 {
	if v := os.Getenv("CONFIG_DATABASE_MAX_IDLE_CONNS"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 5
}

func (DatabaseConfig) MaxOpenConns() int64 {
	if v := os.Getenv("CONFIG_DATABASE_MAX_OPEN_CONNS"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 25
}

func (DatabaseConfig) Pool() DatabasePoolConfig {
	return DatabasePoolConfig{}
}

func (DatabasePoolConfig) Enabled() bool {
	if v := os.Getenv("CONFIG_DATABASE_POOL_ENABLED"); v != "" {
		if b, err := strconv.ParseBool(v); err == nil {
			return b
		}
	}
	return true
}

func (DatabasePoolConfig) MaxSize() int64 {
	if v := os.Getenv("CONFIG_DATABASE_POOL_MAX_SIZE"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 10
}

func (DatabasePoolConfig) MinSize() int64 {
	if v := os.Getenv("CONFIG_DATABASE_POOL_MIN_SIZE"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 2
}

func (EndpointsItem) Methods() []string {
	if v := os.Getenv("CONFIG_ENDPOINTS_METHODS"); v != "" {
		// Array overrides not supported via env vars
	}
	return []string{"GET", "POST"}
}

func (EndpointsItem) Path() string {
	if v := os.Getenv("CONFIG_ENDPOINTS_PATH"); v != "" {
		return v
	}
	return "/api/v1"
}

func (EndpointsItem) RateLimit() int64 {
	if v := os.Getenv("CONFIG_ENDPOINTS_RATE_LIMIT"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 100
}

func (FeaturesItem) Enabled() bool {
	if v := os.Getenv("CONFIG_FEATURES_ENABLED"); v != "" {
		if b, err := strconv.ParseBool(v); err == nil {
			return b
		}
	}
	return true
}

func (FeaturesItem) Name() string {
	if v := os.Getenv("CONFIG_FEATURES_NAME"); v != "" {
		return v
	}
	return "authentication"
}

func (FeaturesItem) Priority() int64 {
	if v := os.Getenv("CONFIG_FEATURES_PRIORITY"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 1
}

func (ServerConfig) Addr() string {
	if v := os.Getenv("CONFIG_SERVER_ADDR"); v != "" {
		return v
	}
	return ":8080"
}

func (ServerConfig) Cert() []byte {
	// Check for file path to load
	if path := os.Getenv("CONFIG_SERVER_CERT"); path != "" {
		if data, err := os.ReadFile(path); err == nil {
			return data
		}
	}
	return []byte{
		0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x43,
		0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d,
		0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x44, 0x58, 0x54, 0x43, 0x43,
		0x41, 0x6b, 0x57, 0x67, 0x41, 0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x4a,
		0x41, 0x4b, 0x4c, 0x30, 0x55, 0x47, 0x2b, 0x6d, 0x52, 0x4b, 0x53, 0x7a,
		0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49, 0x62, 0x33,
		0x44, 0x51, 0x45, 0x42, 0x43, 0x77, 0x55, 0x41, 0x4d, 0x45, 0x55, 0x78,
		0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67, 0x4e, 0x56, 0x0a, 0x42, 0x41, 0x59,
		0x54, 0x41, 0x6b, 0x46, 0x56, 0x4d, 0x52, 0x4d, 0x77, 0x45, 0x51, 0x59,
		0x44, 0x56, 0x51, 0x51, 0x49, 0x44, 0x41, 0x70, 0x54, 0x62, 0x32, 0x31,
		0x6c, 0x4c, 0x56, 0x4e, 0x30, 0x59, 0x58, 0x52, 0x6c, 0x4d, 0x53, 0x45,
		0x77, 0x48, 0x77, 0x59, 0x44, 0x56, 0x51, 0x51, 0x4b, 0x44, 0x42, 0x68,
		0x4a, 0x62, 0x6e, 0x52, 0x6c, 0x63, 0x6d, 0x35, 0x6c, 0x64, 0x43, 0x42,
		0x58, 0x0a, 0x61, 0x57, 0x52, 0x6e, 0x61, 0x58, 0x52, 0x7a, 0x49, 0x46,
		0x42, 0x30, 0x65, 0x53, 0x42, 0x4d, 0x64, 0x47, 0x51, 0x77, 0x48, 0x68,
		0x63, 0x4e, 0x4d, 0x54, 0x63, 0x77, 0x4f, 0x44, 0x49, 0x7a, 0x4d, 0x54,
		0x55, 0x78, 0x4e, 0x54, 0x45, 0x79, 0x57, 0x68, 0x63, 0x4e, 0x4d, 0x6a,
		0x63, 0x77, 0x4f, 0x44, 0x49, 0x78, 0x4d, 0x54, 0x55, 0x78, 0x4e, 0x54,
		0x45, 0x79, 0x57, 0x6a, 0x42, 0x46, 0x0a, 0x4d, 0x51, 0x73, 0x77, 0x43,
		0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x47, 0x45, 0x77, 0x4a, 0x42, 0x56,
		0x54, 0x45, 0x54, 0x4d, 0x42, 0x45, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43,
		0x41, 0x77, 0x4b, 0x55, 0x32, 0x39, 0x74, 0x5a, 0x53, 0x31, 0x54, 0x64,
		0x47, 0x46, 0x30, 0x5a, 0x54, 0x45, 0x68, 0x4d, 0x42, 0x38, 0x47, 0x41,
		0x31, 0x55, 0x45, 0x43, 0x67, 0x77, 0x59, 0x53, 0x57, 0x35, 0x30, 0x0a,
		0x5a, 0x58, 0x4a, 0x75, 0x5a, 0x58, 0x51, 0x67, 0x56, 0x32, 0x6c, 0x6b,
		0x5a, 0x32, 0x6c, 0x30, 0x63, 0x79, 0x42, 0x51, 0x64, 0x48, 0x6b, 0x67,
		0x54, 0x48, 0x52, 0x6b, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e,
		0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42,
		0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41,
		0x4d, 0x49, 0x49, 0x42, 0x0a, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45,
		0x41, 0x7a, 0x50, 0x4a, 0x6e, 0x36, 0x4e, 0x43, 0x4d, 0x6d, 0x4e, 0x47,
		0x70, 0x52, 0x68, 0x5a, 0x4b, 0x57, 0x58, 0x41, 0x36, 0x64, 0x47, 0x7a,
		0x70, 0x46, 0x33, 0x42, 0x4f, 0x38, 0x63, 0x47, 0x31, 0x59, 0x54, 0x2f,
		0x63, 0x53, 0x4c, 0x55, 0x4a, 0x75, 0x50, 0x4b, 0x69, 0x56, 0x6d, 0x48,
		0x59, 0x78, 0x59, 0x51, 0x7a, 0x38, 0x78, 0x51, 0x57, 0x0a, 0x2d, 0x2d,
		0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49,
		0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a,
	}
}

func (ServerConfig) Debug() bool {
	if v := os.Getenv("CONFIG_SERVER_DEBUG"); v != "" {
		if b, err := strconv.ParseBool(v); err == nil {
			return b
		}
	}
	return true
}

func (ServerConfig) IdleTimeout() time.Duration {
	if v := os.Getenv("CONFIG_SERVER_IDLE_TIMEOUT"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 5 * time.Minute
}

func (ServerConfig) MaxHeaderBytes() int64 {
	if v := os.Getenv("CONFIG_SERVER_MAX_HEADER_BYTES"); v != "" {
		if i, err := strconv.ParseInt(v, 10, 64); err == nil {
			return i
		}
	}
	return 1048576
}

func (ServerConfig) ReadTimeout() time.Duration {
	if v := os.Getenv("CONFIG_SERVER_READ_TIMEOUT"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 15 * time.Second
}

func (ServerConfig) ShutdownTimeout() time.Duration {
	if v := os.Getenv("CONFIG_SERVER_SHUTDOWN_TIMEOUT"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 2*time.Hour + 30*time.Minute
}

func (ServerConfig) Timeout() time.Duration {
	if v := os.Getenv("CONFIG_SERVER_TIMEOUT"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 30 * time.Second
}

func (ServerConfig) WriteTimeout() time.Duration {
	if v := os.Getenv("CONFIG_SERVER_WRITE_TIMEOUT"); v != "" {
		if d, err := time.ParseDuration(v); err == nil {
			return d
		}
	}
	return 15 * time.Second
}

func (ServiceConfig) AllowedOrigins() []string {
	if v := os.Getenv("CONFIG_SERVICE_ALLOWED_ORIGINS"); v != "" {
		// Array overrides not supported via env vars
	}
	return []string{"https://example.com", "https://app.example.com"}
}

func (ServiceConfig) Features() []string {
	if v := os.Getenv("CONFIG_SERVICE_FEATURES"); v != "" {
		// Array overrides not supported via env vars
	}
	return []string{"auth", "cache", "metrics"}
}

func (ServiceConfig) Name() string {
	if v := os.Getenv("CONFIG_SERVICE_NAME"); v != "" {
		return v
	}
	return "api"
}

func (ServiceConfig) Ports() []int64 {
	if v := os.Getenv("CONFIG_SERVICE_PORTS"); v != "" {
		// Array overrides not supported via env vars
	}
	return []int64{8080, 8081, 8082}
}

func (ServiceConfig) Weights() []float64 {
	if v := os.Getenv("CONFIG_SERVICE_WEIGHTS"); v != "" {
		// Array overrides not supported via env vars
	}
	return []float64{1, 2.5, 3.7}
}

var (
	App       AppConfig
	Cache     CacheConfig
	Database  DatabaseConfig
	Endpoints []EndpointsItem
	Features  []FeaturesItem
	Name      string
	Server    ServerConfig
	Service   ServiceConfig
)
