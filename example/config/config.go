// Code generated by cfgx. DO NOT EDIT.

package config

import "time"

type AppConfig struct {
	Logging AppLoggingConfig
	Name    string
	Version string
}

type AppLoggingConfig struct {
	File     string
	Format   string
	Level    string
	Rotation AppLoggingRotationConfig
}

type AppLoggingRotationConfig struct {
	Compress bool
	MaxAge   int64
	MaxSize  int64
}

type CacheConfig struct {
	Enabled    bool
	MaxEntries int64
	Outputs    []string
	Redis      CacheRedisConfig
	Ttl        time.Duration
}

type CacheRedisConfig struct {
	Addr     string
	Db       int64
	Password string
}

type DatabaseConfig struct {
	ConnMaxLifetime time.Duration
	Dsn             string
	MaxIdleConns    int64
	MaxOpenConns    int64
	Pool            DatabasePoolConfig
}

type DatabasePoolConfig struct {
	Enabled bool
	MaxSize int64
	MinSize int64
}

type EndpointsItem struct {
	Methods   []string
	Path      string
	RateLimit int64
}

type FeaturesItem struct {
	Enabled  bool
	Name     string
	Priority int64
}

type ServerConfig struct {
	Addr           string
	Debug          bool
	IdleTimeout    time.Duration
	MaxHeaderBytes int64
	ReadTimeout    time.Duration
	Timeout        time.Duration
	WriteTimeout   time.Duration
}

type ServiceConfig struct {
	AllowedOrigins []string
	Features       []string
	Name           string
	Ports          []int64
	Weights        []float64
}

var (
	App = AppConfig{
		Logging: AppLoggingConfig{
			File:   "/var/log/app.log",
			Format: "json",
			Level:  "info",
			Rotation: AppLoggingRotationConfig{
				Compress: true,
				MaxAge:   30,
				MaxSize:  100,
			},
		},
		Name:    "myservice",
		Version: "1.0.0",
	}
	Cache = CacheConfig{
		Enabled:    true,
		MaxEntries: 10000,
		Outputs:    []string{"stdout", "file"},
		Redis: CacheRedisConfig{
			Addr:     "localhost:6379",
			Db:       0,
			Password: "",
		},
		Ttl: 1 * time.Hour,
	}
	Database = DatabaseConfig{
		ConnMaxLifetime: 5 * time.Minute,
		Dsn:             "postgres://localhost/myapp",
		MaxIdleConns:    5,
		MaxOpenConns:    25,
		Pool: DatabasePoolConfig{
			Enabled: true,
			MaxSize: 10,
			MinSize: 2,
		},
	}
	Endpoints = []EndpointsItem{
		{
			Methods:   []string{"GET", "POST"},
			Path:      "/api/v1",
			RateLimit: 100,
		},
		{
			Methods:   []string{"GET", "POST", "PUT", "DELETE"},
			Path:      "/api/v2",
			RateLimit: 200,
		},
	}
	Features = []FeaturesItem{
		{
			Enabled:  true,
			Name:     "authentication",
			Priority: 1,
		},
		{
			Enabled:  true,
			Name:     "rate_limiting",
			Priority: 2,
		},
		{
			Enabled:  false,
			Name:     "caching",
			Priority: 3,
		},
	}
	Name   string = "cfgx"
	Server        = ServerConfig{
		Addr:           ":8080",
		Debug:          true,
		IdleTimeout:    5 * time.Minute,
		MaxHeaderBytes: 1048576,
		ReadTimeout:    15 * time.Second,
		Timeout:        30 * time.Second,
		WriteTimeout:   15 * time.Second,
	}
	Service = ServiceConfig{
		AllowedOrigins: []string{"https://example.com", "https://app.example.com"},
		Features:       []string{"auth", "cache", "metrics"},
		Name:           "api",
		Ports:          []int64{8080, 8081, 8082},
		Weights:        []float64{1, 2.5, 3.7},
	}
)
